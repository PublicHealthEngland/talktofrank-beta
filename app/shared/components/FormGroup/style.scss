.form-control {
  display: block;
  width: 100%;
  max-width: 50rem; // @joel - stuffing this in here as it all feels well big otherwise
  line-height: 1.5;
  background-clip: padding-box;
  background-color: $white;
  box-sizing: border-box;
  padding: .375em .75em;
  border-width: 1px;
  border-style: solid;
  border-color: $text-dark-blue;
  border-image: initial;
  border-radius: 3px;
  transition: border-color .15s ease-in-out 0s, box-shadow .15s ease-in-out 0s;

  @include box-shadow($input-box-shadow);
  @include transition($input-transition);

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus();

  // Placeholder
  &::placeholder {
    color: $input-placeholder-color;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-disabled-bg;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  &--search {
    border: 0;
    color: $text-dark-blue;
    font-size: 2.1rem;
    padding: .4em;
    min-width: 100%;
  }

  &--underline {
    text-decoration: underline;
    text-decoration-style: dashed;
    text-decoration-color: $pink;
    text-decoration-skip-ink: none;
    text-underline-position: under;
  }

  &--reversed {
    border: 0;
    background-color: $white;
    border-radius: 0;
  }

  &--large {
    height: 3em;
  }
}

.form-label {
  font-size: 2.1rem;
  flex-basis: 100%;
  font-family: $headings-font-family;
}

input[type='search'],
input[type='text'] {
  caret-color: $pink;
}

////////////
.close {
  align-self: flex-start;
}

select.form-control {
  appearance: none;
  line-height: 1;
  height: 2em;
  background-repeat: no-repeat;
  background-size: .5em auto;
  background-position: right .5em center;
  padding: .5em;
  background-image: url("data:image/svg+xml;charset=utf-8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 60 40'><polygon points='0,0 60,0 30,40' style='fill:#D10058;'/></svg>"); // sass-lint:disable-line quotes

  &--large {
    height: 3em;
    padding: .75em;
    background-size: .8em auto;
    background-position: right .8em center;
  }

  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $input-color;
    background-color: $input-bg;
  }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: 3rem;
}

.form-hint {
  font-size: 1.8rem;
}

.form-text {
  display: block;
  margin-top: $form-text-margin-top;
}

// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.

.form-row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -5px;
  margin-left: -5px;

  > .col,
  > [class*='col-'] {
    padding-right: 5px;
    padding-left: 5px;
  }
}

/////////////////////
// autosuggest specific stylings - a theming layer if you will
/////////////////////

.react-autosuggest__container {
  flex-basis: 100%;
  max-width: 79rem;

  input[type='search'] {
    padding: 10px;
    border-bottom-width: 3px;
    border-bottom-style: solid;
    border-bottom-color: $text-dark-blue;
    margin-bottom: 10px;
  }
}

.react-autosuggest__suggestions-list {
  list-style: none;
  padding-left: 0;
}

.react-autosuggest__suggestion--highlighted {
  background-color: $gray-200;

  a:after {
    @include arrow;
  }
}

.react-autosuggest__suggestions-container--open,
.react-autosuggest__container--open {

}

.react-autosuggest__container--open {
  min-width: 100%;
  max-width: 50rem;
  flex-basis: 100%;
}

.react-autosuggest__suggestion {
  @extend %list-item--underlined;

  p {
    margin-bottom: 0;
  }
}

.react-autosuggest__suggestions-container--open {

}

// container:                'react-autosuggest__container',
// containerOpen:            'react-autosuggest__container--open',
// input:                    'react-autosuggest__input',
// inputOpen:                'react-autosuggest__input--open',
// inputFocused:             'react-autosuggest__input--focused',
// suggestionsContainer:     'react-autosuggest__suggestions-container',
// suggestionsContainerOpen: 'react-autosuggest__suggestions-container--open',
// suggestionsList:          'react-autosuggest__suggestions-list',
// suggestion:               'react-autosuggest__suggestion',
// suggestionFirst:          'react-autosuggest__suggestion--first',
// suggestionHighlighted:    'react-autosuggest__suggestion--highlighted',
// sectionContainer:         'react-autosuggest__section-container',
// sectionContainerFirst:    'react-autosuggest__section-container--first',
// sectionTitle:             'react-autosuggest__section-title'
